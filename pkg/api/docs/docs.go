// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/v1/auth": {
            "post": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json",
                    "application/problem+json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Authenticate with credentials",
                "parameters": [
                    {
                        "description": "Credentials",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/auth.authRequestDTO"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/auth.authResponseDTO"
                        }
                    },
                    "400": {
                        "description": "Invalid input",
                        "schema": {
                            "$ref": "#/definitions/apierrors.ProblemDetails"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/apierrors.ProblemDetails"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "$ref": "#/definitions/apierrors.ProblemDetails"
                        }
                    }
                }
            }
        },
        "/v1/auth/refresh": {
            "post": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json",
                    "application/problem+json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Refresh token",
                "parameters": [
                    {
                        "description": "Refresh token",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/auth.refreshTokenRequestDTO"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/auth.authResponseDTO"
                        }
                    },
                    "400": {
                        "description": "Invalid input",
                        "schema": {
                            "$ref": "#/definitions/apierrors.ProblemDetails"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/apierrors.ProblemDetails"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "$ref": "#/definitions/apierrors.ProblemDetails"
                        }
                    }
                }
            }
        },
        "/v1/groups/{groupId}/events": {
            "get": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json",
                    "application/problem+json"
                ],
                "tags": [
                    "groupevents"
                ],
                "summary": "Get group events",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Group ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Filter events before this timestamp",
                        "name": "before",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter events after this timestamp",
                        "name": "after",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Pagination cursor",
                        "name": "cursor",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Maximum number of results",
                        "name": "limit",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/groupevents.groupEventsResponseDTO"
                        }
                    },
                    "400": {
                        "description": "Invalid input",
                        "schema": {
                            "$ref": "#/definitions/apierrors.ProblemDetails"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/apierrors.ProblemDetails"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "$ref": "#/definitions/apierrors.ProblemDetails"
                        }
                    }
                }
            }
        },
        "/v1/groups/{groupId}/events/next": {
            "get": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json",
                    "application/problem+json"
                ],
                "tags": [
                    "groupevents"
                ],
                "summary": "Get next group event",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Group ID",
                        "name": "groupId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/groupevents.eventDTO"
                        }
                    },
                    "400": {
                        "description": "Invalid input",
                        "schema": {
                            "$ref": "#/definitions/apierrors.ProblemDetails"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/apierrors.ProblemDetails"
                        }
                    },
                    "404": {
                        "description": "Not found",
                        "schema": {
                            "$ref": "#/definitions/apierrors.ProblemDetails"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "$ref": "#/definitions/apierrors.ProblemDetails"
                        }
                    }
                }
            }
        },
        "/v1/groups/{groupId}/events/{eventId}": {
            "get": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json",
                    "application/problem+json"
                ],
                "tags": [
                    "groupevents"
                ],
                "summary": "Get group event by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Group ID",
                        "name": "groupId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Event ID",
                        "name": "eventId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/groupevents.eventDTO"
                        }
                    },
                    "400": {
                        "description": "Invalid input",
                        "schema": {
                            "$ref": "#/definitions/apierrors.ProblemDetails"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/apierrors.ProblemDetails"
                        }
                    },
                    "404": {
                        "description": "Not found",
                        "schema": {
                            "$ref": "#/definitions/apierrors.ProblemDetails"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "$ref": "#/definitions/apierrors.ProblemDetails"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "apierrors.ProblemDetails": {
            "type": "object",
            "properties": {
                "detail": {
                    "type": "string"
                },
                "instance": {
                    "type": "string"
                },
                "status": {
                    "type": "integer"
                },
                "title": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                }
            }
        },
        "auth.authRequestDTO": {
            "type": "object",
            "properties": {
                "clientId": {
                    "type": "string"
                },
                "clientSecret": {
                    "type": "string"
                }
            }
        },
        "auth.authResponseDTO": {
            "type": "object",
            "properties": {
                "accessToken": {
                    "type": "string"
                },
                "accessTokenExpiresAt": {
                    "type": "string"
                },
                "refreshToken": {
                    "type": "string"
                },
                "refreshTokenExpiresAt": {
                    "type": "string"
                }
            }
        },
        "auth.refreshTokenRequestDTO": {
            "type": "object",
            "properties": {
                "refreshToken": {
                    "type": "string"
                }
            }
        },
        "groupevents.eventDTO": {
            "type": "object",
            "properties": {
                "dateTime": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "duration": {
                    "type": "string"
                },
                "eventUrl": {
                    "type": "string"
                },
                "group.name": {
                    "type": "string"
                },
                "group.urlname": {
                    "type": "string"
                },
                "host": {
                    "$ref": "#/definitions/groupevents.hostDTO"
                },
                "id": {
                    "type": "string"
                },
                "images": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/groupevents.imageDTO"
                    }
                },
                "title": {
                    "type": "string"
                },
                "venue": {
                    "$ref": "#/definitions/groupevents.venueDTO"
                }
            }
        },
        "groupevents.groupEventsResponseDTO": {
            "type": "object",
            "properties": {
                "items": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/groupevents.eventDTO"
                    }
                },
                "nextPageUrl": {
                    "type": "string"
                }
            }
        },
        "groupevents.hostDTO": {
            "type": "object",
            "properties": {
                "name": {
                    "type": "string"
                }
            }
        },
        "groupevents.imageDTO": {
            "type": "object",
            "properties": {
                "baseUrl": {
                    "type": "string"
                },
                "preview": {
                    "type": "string"
                }
            }
        },
        "groupevents.venueDTO": {
            "type": "object",
            "properties": {
                "address": {
                    "type": "string"
                },
                "city": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "postalCode": {
                    "type": "string"
                },
                "state": {
                    "type": "string"
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "",
	BasePath:         "",
	Schemes:          []string{},
	Title:            "SGF Meetup API",
	Description:      "",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
