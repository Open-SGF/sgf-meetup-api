// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package api

import (
	"context"
	"github.com/gin-gonic/gin"
	"github.com/google/wire"
	"sgf-meetup-api/pkg/api/apiconfig"
	"sgf-meetup-api/pkg/api/auth"
	"sgf-meetup-api/pkg/api/groupevents"
	"sgf-meetup-api/pkg/shared/clock"
	"sgf-meetup-api/pkg/shared/db"
	"sgf-meetup-api/pkg/shared/logging"
)

import (
	_ "sgf-meetup-api/pkg/api/docs"
)

// Injectors from wire.go:

func InitRouter(ctx context.Context) (*gin.Engine, error) {
	config, err := apiconfig.NewConfig()
	if err != nil {
		return nil, err
	}
	loggingConfig := apiconfig.NewLoggingConfig(config)
	logger := logging.DefaultLogger(loggingConfig)
	serviceConfig := auth.NewServiceConfig(config)
	realTimeSource := clock.NewRealTimeSource()
	dynamoDBAPIUserRepositoryConfig := auth.NewDynamoDBAPIUserRepositoryConfig(config)
	dbConfig := apiconfig.NewDBConfig(config)
	client, err := db.NewClient(ctx, dbConfig, logger)
	if err != nil {
		return nil, err
	}
	dynamoDBAPIUserRepository := auth.NewDynamoDBAPIUserRepository(dynamoDBAPIUserRepositoryConfig, client)
	tokenManagerConfig := auth.NewTokenValidatorConfig(config)
	tokenManagerImpl := auth.NewTokenManager(tokenManagerConfig, realTimeSource)
	service := auth.NewService(serviceConfig, realTimeSource, dynamoDBAPIUserRepository, tokenManagerImpl)
	controller := auth.NewController(service)
	controllerConfig := groupevents.NewControllerConfig(config)
	groupeventsService := groupevents.NewService()
	groupeventsController := groupevents.NewController(controllerConfig, groupeventsService)
	middleware := auth.NewMiddleware(tokenManagerImpl)
	engine := NewRouter(logger, controller, groupeventsController, middleware)
	return engine, nil
}

// wire.go:

var CommonProviders = wire.NewSet(apiconfig.NewConfig, logging.DefaultLogger, apiconfig.NewLoggingConfig, clock.RealClockProvider)

var DBProvider = wire.NewSet(apiconfig.NewDBConfig, db.NewClient)
