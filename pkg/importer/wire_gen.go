// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package importer

import (
	"context"
	"github.com/google/wire"
	"sgf-meetup-api/pkg/shared/clock"
	"sgf-meetup-api/pkg/shared/db"
	"sgf-meetup-api/pkg/shared/httpclient"
	"sgf-meetup-api/pkg/shared/logging"
)

// Injectors from wire.go:

func InitService(ctx context.Context, config *Config) (*Service, error) {
	serviceConfig := NewServiceConfig(config)
	realTimeSource := clock.NewRealTimeSource()
	loggingConfig := getLoggingConfig(config)
	logger := logging.DefaultLogger(loggingConfig)
	dynamoDBEventRepositoryConfig := NewDynamoDBEventRepositoryConfig(config)
	dbConfig := getDbConfig(config)
	client, err := db.New(ctx, dbConfig, logger)
	if err != nil {
		return nil, err
	}
	dynamoDBEventRepository := NewDynamoDBEventRepository(dynamoDBEventRepositoryConfig, client, realTimeSource, logger)
	lambdaProxyGraphQLHandlerConfig := NewLambdaProxyGraphQLHandlerConfig(config)
	lambdaProxyGraphQLHandler := NewLambdaProxyGraphQLHandler(lambdaProxyGraphQLHandlerConfig, logger)
	graphQLMeetupRepository := NewGraphQLMeetupRepository(lambdaProxyGraphQLHandler, logger)
	service := NewService(serviceConfig, realTimeSource, logger, dynamoDBEventRepository, graphQLMeetupRepository)
	return service, nil
}

// wire.go:

var CommonSet = wire.NewSet(logging.DefaultLogger, clock.RealClockSet, httpclient.DefaultClient, getLoggingConfig)

var DBSet = wire.NewSet(getDbConfig, db.New)

var EventRepositorySet = wire.NewSet(wire.Bind(new(EventRepository), new(*DynamoDBEventRepository)), NewDynamoDBEventRepositoryConfig, NewDynamoDBEventRepository)

var GraphQLHandlerSet = wire.NewSet(wire.Bind(new(GraphQLHandler), new(*LambdaProxyGraphQLHandler)), NewLambdaProxyGraphQLHandlerConfig, NewLambdaProxyGraphQLHandler)

var MeetupRepositorySet = wire.NewSet(wire.Bind(new(MeetupRepository), new(*GraphQLMeetupRepository)), NewGraphQLMeetupRepository)
