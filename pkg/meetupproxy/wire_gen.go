// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package meetupproxy

import (
	"context"
	"github.com/google/wire"
	"sgf-meetup-api/pkg/meetupproxy/meetupproxyconfig"
	"sgf-meetup-api/pkg/shared/appconfig"
	"sgf-meetup-api/pkg/shared/clock"
	"sgf-meetup-api/pkg/shared/httpclient"
	"sgf-meetup-api/pkg/shared/logging"
)

// Injectors from wire.go:

func InitService(ctx context.Context) (*Service, error) {
	awsConfigManagerImpl := appconfig.NewAwsConfigManager()
	config, err := meetupproxyconfig.NewConfig(ctx, awsConfigManagerImpl)
	if err != nil {
		return nil, err
	}
	serviceConfig := NewServiceConfig(config)
	realTimeSource := clock.NewRealTimeSource()
	common := config.Common
	loggingConfig := common.Logging
	logger := logging.DefaultLogger(ctx, loggingConfig)
	client := httpclient.DefaultClient(realTimeSource, logger)
	meetupHttpAuthHandlerConfig := NewMeetupAuthHandlerConfig(config)
	meetupHttpAuthHandler := NewMeetupHttpAuthHandler(meetupHttpAuthHandlerConfig, client, logger)
	service := NewService(serviceConfig, client, meetupHttpAuthHandler, logger)
	return service, nil
}

// wire.go:

var CommonProviders = wire.NewSet(meetupproxyconfig.ConfigProviders, logging.DefaultLogger, clock.RealClockProvider, httpclient.DefaultClient)
